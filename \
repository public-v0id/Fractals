#include <QWidget>
#include "window.h"
#include <iostream>
#include "complex.h"
#include "math.h"
#include <QPainter>
#include <QColor>
#include <QKeyEvent>
#include <cmath>

window::window(QWidget* parent) : QWidget(parent) {
	this->setFixedHeight(450);
	this->setFixedWidth(800);
	zoom = 0.004888889;
	xMov = 0;
	yMov = 0;
	delta = 25;
	maxiter = 30;
}

void window::destroy() {
	std::cout << "Bye\n";
}

void window::closeEvent(QCloseEvent* event) {
	this->destroy();
}

void window::paintEvent(QPaintEvent* event) {
	QPainter painter(this);
	double offset[] = {520, 225}; 
	int max = std::min(std::max(10, int(maxiter)), 100);
	for (int x = 0; x < 800; ++x) {
		for (int y = 0; y < 450; ++y) {
			int iter = 0;
			complex c((x-offset[0]+xMov)*zoom, (y-offset[1]+yMov)*zoom);
			complex z(0,0);
			for (int i = 0; i < max; ++i) {
				z = sqr(z)+c;
				if (abssqr(z) > 4) {
					break;
				}
				++iter;
			}
			long double col = 255.0*iter/max;
			QColor color(col, 0, 0);
			painter.setPen(color);
			painter.drawPoint(x, y);
//			std::cout << z << "\n";
		}
	}
}

void window::keyPressEvent(QKeyEvent* event) {
	switch (event->key()) {
		case Qt::Key_Plus:
			zoom /= 2;
			xMov *= 2;
			yMov *= 2;
			delta *= 1.3;
			update();
			break;
		case Qt::Key_Minus:
			zoom *= 2;
			xMov /= 2;
			yMov /= 2;
			delta /= 1.3; 
			update();
			break;
		case Qt::Key_Q:
			maxiter -= 10;
			std::cout << maxiter << "\n"
			update();
			break;
		case Qt::Key_E:
			maxiter += 10;
			std::cout << maxiter << "\n";
			update();
			break;
		case Qt::Key_Left:
			xMov -= delta;
			update();
			break;
		case Qt::Key_Right:
			xMov += delta;
			update();
			break;
		case Qt::Key_Up:
			yMov -= delta;
			update();
			break;
		case Qt::Key_Down:
			yMov += delta;
			update();
			break;
	}

}
